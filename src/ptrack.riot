<ptrack>
  <h2>{ props.input.title }</h2>
  <p>{ props.input.username }</p>
  <ul>
    <li each={ tag in props.input.tags}>#{tag.trim()}</li>
  </ul>
  <p class="small">Listen track of total duration { state.duration_slang }&nbsp;<a href={ props.input.url}>here</a>.</p>
  <style>
    :host {
      padding-left: 1rem;
      padding-right: 1rem;
      display: block;
    }
    @media (min-width: 1024px) {
      :host {
        padding-left: 0;
        padding-right: 0;
      }
    }
    h2 {
      margin-bottom: 0.1rem;
    }
    p {
      margin-top: 0;
    }
    ul {
      list-style-type: none;
      padding-left: 0.5rem;
    }
    ul li {
      font-size: 0.8rem;
    }
  </style>
  <script>
    import PArtwork from './partwork.riot';

    const noop = ()=>{};
  
    const SC_STREAM = 'stream_ready';
    export default {
      components: { PArtwork },
      state: {
        uri: null, 
        hide: 'hide',
        duration_slang: '00:00',
      },
      onBeforeMount(props, state) {
        state.uri = props.input.uri;
        let [_, f] = RegExp('T(.*)\.[0-9]{3}').exec(
          (new Date(1000*Math.round(props.input.duration/1000))).toISOString());
        state.duration_slang = f;

        const onStreamReady = props.onStreamReady || noop;
        this.root.addEventListener(SC_STREAM, onStreamReady);

        SC.stream(state.uri)
          .then( player => {
            const detail = { uri: state.uri, player };
            this.root
              .dispatchEvent(new CustomEvent(SC_STREAM, { detail }));

            this.update({ hide: '' });
          })
          .catch( err => {
            const detail = { uri: state.uri, err };
            this.root
              .dispatchEvent(new CustomEvent(SC_STREAM, { detail }));

            this.unmount(); 
          });
        }
      };
  </script>
</ptrack>
