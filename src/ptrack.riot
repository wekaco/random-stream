<ptrack>
  <article
    id={ state.id }
    class={ `${state.hide}` }>
      <partwork src={ props.input.cover } ></partwork>
      <h2>{ props.input.title }</h2>
      <h3>{ props.input.username }</h3>
      <ul>
        <li each={ tag in props.input.tags}>{tag}</li>
      </ul>
  </article>
  <style>
    :host {
        --host-height: 50vh; 
    }
    /* For phone devices */
    @media (min-width: 360px) {
      :host {
        --host-height: 100vh; 
      }
    }
    /* For tablet devices */
    @media (min-width: 720px) {
      :host {
      }
    }

    @media (min-width: 1024px) {
      :host {
        padding-top: 20vh;
        --host-height: 100vh; 
      }
    }
    :host article {
      display: block;
      height: var(--host-height);
    }
    article  {
    }
    article h2 {
      margin-top: 0;
    }
    article.hide {
      display: none;
    }
  </style>
  <script>
    import PArtwork from './partwork.riot';

    const noop = ()=>{};
  
    const SC_STREAM = 'stream_ready';
    export default {
      components: { PArtwork },
      state: {
        uri: null, 
        hide: 'hide',
      },
      onBeforeMount(props, state) {
        state.uri = props.input.uri;

        const onStreamReady = props.onStreamReady || noop;
        this.root.addEventListener(SC_STREAM, onStreamReady);

        SC.stream(state.uri)
          .then( player => {
            const detail = { uri: state.uri, player };
            this.root
              .dispatchEvent(new CustomEvent(SC_STREAM, { detail }));

            this.update({ hide: '' });
          })
          .catch( err => {
            const detail = { uri: state.uri, err };
            this.root
              .dispatchEvent(new CustomEvent(SC_STREAM, { detail }));

            this.unmount(); 
          });
        }
      };
  </script>
</ptrack>
