<stem id={ state.id }>
  <label>{ props.uri }</label>
  <script>
    import noop from './noop';
    const STEM_LOAD = 'stem.load';
    const STEM_ERROR = 'stem.error';
    const STEM_CUE = 'stem.cue';
    const STEM_PLAY = 'stem.play';
    const STEM_STOP = 'stem.stop';

    export default {
      state: {
        id: null,
        request: null,
        buffer: null,
        ctx: null,
        source: null,
      },
      onBeforeMount(props, state) {
        state.ctx = props.ctx;
        state.out = props.out;

        state.id = btoa(props.uri).replace(/=/gi, '');

        const load = props.load || noop;
        const error = props.error || noop;
        this.root.addEventListener(STEM_LOAD, load);
        this.root.addEventListener(STEM_ERROR, error);

        const request = new XMLHttpRequest();
        request.open('GET', props.uri, true);
        request.responseType = 'arraybuffer';

        request.onload = () => {
          state.ctx.decodeAudioData(request.response, (buffer) => {
            state.buffer = buffer;
            const detail = { id: state.id };
            this.root
              .addEventListener(STEM_CUE, (e) => {
                const when = e.detail;
                const source = state.ctx.createBufferSource();
                source.loop = true;
                source.buffer = state.buffer;
                source.connect(state.out);
                source.start(when);
                this.root.addEventListener(STEM_STOP, () => source.stop(), { once: true }); 
                this.root.dispatchEvent(
                  new CustomEvent(STEM_PLAY, { detail })
                );
              });
            this.root
              .dispatchEvent(new CustomEvent(STEM_LOAD, { detail }));
          },
          (err) => {
            this.root
              .dispatchEvent(new CustomEvent(STEM_ERROR, { detail: err }));
          });
        }
        
        request.send();
        state.request = request;
      }
    };
  </script>
</stem>
